from task import *
from func import *
from ppoly import *
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# for camera ready paper submission only type 1 and truetype fonts are allowed
plt.rc('pdf', fonttype=42)

def PlotRealBottleModPerformanceTimes():
    data = [
        [1, 24.186, 23.393, 23.754],
        [6, 26.328, 26.489, 28.628],
        [7, 26.711, 27.432, 26.724],
        [9, 28.401, 25.654, 26.753],
        [10, 27.643, 27.923, 26.387],
        [10, 25.839, 26.091, 25.529],
        [50, 25.731, 25.096, 23.925],
        [60, 23.693, 24.670, 25.154],
        [70, 24.853, 26.180, 24.571],
        [80, 24.250, 24.467, 25.147],
        [90, 24.031, 24.687, 25.447],
        [100, 23.965, 24.450, 24.884],
        [120, 24.492, 24.620, 25.005],
        [130, 25.121, 25.634, 24.216],
        [140, 24.874, 24.065, 25.373],
        [150, 24.544, 24.816, 24.276],
        [160, 24.455, 25.704, 25.127],
        [170, 24.390, 24.506, 24.299],
        [180, 24.136, 24.757, 25.151],
        [190, 24.784, 25.030, 24.683],
        [200, 24.604, 24.736, 25.088],
        [210, 24.054, 24.590, 25.014],
        [220, 24.431, 25.606, 24.965],
        [240, 24.689, 24.334, 24.230],
        [250, 24.693, 24.808, 24.966],
        [260, 25.736, 25.199, 24.376],
        [270, 25.356, 24.379, 25.551],
        [280, 24.985, 24.017, 24.842],
        [290, 25.490, 25.275, 25.178],
        [300, 24.580, 24.330, 26.371],
        [310, 24.208, 24.545, 24.417],
        [320, 24.546, 25.879, 25.061],
        [330, 24.904, 24.271, 25.339],
        [340, 24.009, 24.520, 25.555],
        [350, 24.381, 25.434, 24.473],
        [360, 24.151, 24.181, 24.606],
        [370, 24.935, 24.258, 25.607],
        [380, 26.032, 24.816, 25.836],
        [790, 25.419, 25.015, 25.321],
        [800, 24.260, 25.565, 24.373],
        [820, 24.098, 24.333, 25.564],
        [850, 24.299, 25.222, 24.941],
        [870, 24.042, 24.588, 25.457],
        [900, 24.653, 24.002, 24.208],
        [910, 24.608, 24.622, 24.389],
        [920, 25.522, 25.175, 24.718],
        [950, 25.617, 25.217, 25.059],
        [960, 25.917, 24.036, 25.370],
        [980, 24.725, 25.599, 25.416],
        [1000, 24.272, 24.507, 25.314]
    ]

    xs = [d[0] for d in data]
    ys = [np.average(d[1:]) * 0.92 for d in data]
    plt.scatter(xs, ys, c='black', s=2, zorder=1)

def PlotRealExecutionTimes(plotObj):
    data = [ # main eval run
        [6400, 6400, 4 * 60 + 19.637],
        [6300, 6500, 4 * 60 + 16.858],
        [6200, 6600, 4 * 60 + 14.629],
        [6100, 6700, 4 * 60 + 11.711],
        [6000, 6800, 4 * 60 + 8.929],
        [5900, 6900, 4 * 60 + 6.604],
        [5800, 7000, 4 * 60 + 4.545],
        [5700, 7100, 4 * 60 + 2.189],
        [5600, 7200, 3 * 60 + 58.881],
        [5500, 7300, 3 * 60 + 57.183],
        [5400, 7400, 3 * 60 + 55.233],
        [5300, 7500, 3 * 60 + 53.010],
        [5200, 7600, 3 * 60 + 50.487],
        [5100, 7700, 3 * 60 + 49.137],
        [5000, 7800, 3 * 60 + 46.128],
        [4900, 7900, 3 * 60 + 45.560],
        [4800, 8000, 3 * 60 + 43.373],
        [4700, 8100, 3 * 60 + 41.500],
        [4600, 8200, 3 * 60 + 40.369],
        [4500, 8300, 3 * 60 + 38.552],
        [4400, 8400, 3 * 60 + 37.523],
        [4300, 8500, 3 * 60 + 36.071],
        [4200, 8600, 3 * 60 + 32.961],
        [4100, 8700, 3 * 60 + 33.396],
        [4000, 8800, 3 * 60 + 31.442],
        [3900, 8900, 3 * 60 + 30.689],
        [3800, 9000, 3 * 60 + 30.326],
        [3700, 9100, 3 * 60 + 27.289],
        [3600, 9200, 3 * 60 + 26.073],
        [3500, 9300, 3 * 60 + 24.248],
        [3400, 9400, 3 * 60 + 24.058],
        [3300, 9500, 3 * 60 + 22.697],
        [3200, 9600, 3 * 60 + 21.100],
        [3100, 9700, 3 * 60 + 20.426],
        [3000, 9800, 3 * 60 + 18.702],
        [2900, 9900, 3 * 60 + 17.879],
        [2800, 10000, 3 * 60 + 16.920],
        [2700, 10100, 3 * 60 + 15.434],
        [2600, 10200, 3 * 60 + 14.353],
        [2500, 10300, 3 * 60 + 13.084],
        [2400, 10400, 3 * 60 + 12.183],
        [2300, 10500, 3 * 60 + 11.026],
        [2200, 10600, 3 * 60 + 11.464],
        [2100, 10700, 3 * 60 + 9.055],
        [2000, 10800, 3 * 60 + 8.511],
        [1900, 10900, 3 * 60 + 7.180],
        [1800, 11000, 3 * 60 + 6.224],
        [1700, 11100, 3 * 60 + 5.472],
        [1600, 11200, 3 * 60 + 3.708],
        [1500, 11300, 3 * 60 + 3.234],
        [1400, 11400, 3 * 60 + 1.999],
        [1300, 11500, 3 * 60 + 0.757],
        [1200, 11600, 3 * 60 + 0.978],
        [1100, 11700, 2 * 60 + 59.404],
        [1000, 11800, 2 * 60 + 59.109],
        [900, 11900, 2 * 60 + 58.602],
        [800, 12000, 2 * 60 + 58.095],
        [700, 12100, 2 * 60 + 58.434],
        [600, 12200, 2 * 60 + 58.136],
        [500, 12300, 2 * 60 + 58.437],
        [400, 12400, 2 * 60 + 58.160],
        [300, 12500, 2 * 60 + 58.403],
        [200, 12600, 2 * 60 + 58.247],
        [100, 12700, 2 * 60 + 58.434],
        [6400, 6400, 4 * 60 + 19.515],
        [6300, 6500, 4 * 60 + 17.291],
        [6200, 6600, 4 * 60 + 14.664],
        [6100, 6700, 4 * 60 + 11.122],
        [6000, 6800, 4 * 60 + 8.884],
        [5900, 6900, 4 * 60 + 6.234],
        [5800, 7000, 4 * 60 + 4.136],
        [5700, 7100, 4 * 60 + 1.479],
        [5600, 7200, 3 * 60 + 59.716],
        [5500, 7300, 3 * 60 + 57.136],
        [5400, 7400, 3 * 60 + 55.296],
        [5300, 7500, 3 * 60 + 53.345],
        [5200, 7600, 3 * 60 + 51.132],
        [5100, 7700, 3 * 60 + 49.173],
        [5000, 7800, 3 * 60 + 47.292],
        [4900, 7900, 3 * 60 + 46.198],
        [4800, 8000, 3 * 60 + 44.023],
        [4700, 8100, 3 * 60 + 41.627],
        [4600, 8200, 3 * 60 + 39.763],
        [4500, 8300, 3 * 60 + 38.453],
        [4400, 8400, 3 * 60 + 37.593],
        [4300, 8500, 3 * 60 + 35.147],
        [4200, 8600, 3 * 60 + 32.579],
        [4100, 8700, 3 * 60 + 31.644],
        [4000, 8800, 3 * 60 + 31.376],
        [3900, 8900, 3 * 60 + 29.637],
        [3800, 9000, 3 * 60 + 29.350],
        [3700, 9100, 3 * 60 + 27.334],
        [3600, 9200, 3 * 60 + 26.408],
        [3500, 9300, 3 * 60 + 25.549],
        [3400, 9400, 3 * 60 + 23.790],
        [3300, 9500, 3 * 60 + 22.585],
        [3200, 9600, 3 * 60 + 21.023],
        [3100, 9700, 3 * 60 + 19.395],
        [3000, 9800, 3 * 60 + 19.188],
        [2900, 9900, 3 * 60 + 17.044],
        [2800, 10000, 3 * 60 + 16.080],
        [2700, 10100, 3 * 60 + 15.719],
        [2600, 10200, 3 * 60 + 13.801],
        [2500, 10300, 3 * 60 + 13.281],
        [2400, 10400, 3 * 60 + 11.706],
        [2300, 10500, 3 * 60 + 10.395],
        [2200, 10600, 3 * 60 + 9.874],
        [2100, 10700, 3 * 60 + 7.643],
        [2000, 10800, 3 * 60 + 7.589],
        [1900, 10900, 3 * 60 + 6.168],
        [1800, 11000, 3 * 60 + 6.497],
        [1700, 11100, 3 * 60 + 4.807],
        [1600, 11200, 3 * 60 + 3.738],
        [1500, 11300, 3 * 60 + 4.271],
        [1400, 11400, 3 * 60 + 1.832],
        [1300, 11500, 3 * 60 + 2.352],
        [1200, 11600, 3 * 60 + 1.252],
        [1100, 11700, 2 * 60 + 59.520],
        [1000, 11800, 2 * 60 + 59.182],
        [900, 11900, 3 * 60 + 1.121],
        [800, 12000, 2 * 60 + 58.328],
        [700, 12100, 2 * 60 + 58.460],
        [600, 12200, 2 * 60 + 58.167],
        [500, 12300, 2 * 60 + 58.144],
        [400, 12400, 2 * 60 + 58.087],
        [300, 12500, 2 * 60 + 58.250],
        [200, 12600, 2 * 60 + 58.192],
        [100, 12700, 2 * 60 + 58.247],
        [6400, 6400, 4 * 60 + 18.543],
        [6300, 6500, 4 * 60 + 16.770],
        [6200, 6600, 4 * 60 + 12.654],
        [6100, 6700, 4 * 60 + 11.434],
        [6000, 6800, 4 * 60 + 8.804],
        [5900, 6900, 4 * 60 + 5.934],
        [5800, 7000, 4 * 60 + 7.064],
        [5700, 7100, 4 * 60 + 6.034],
        [5600, 7200, 3 * 60 + 59.388],
        [5500, 7300, 3 * 60 + 56.936],
        [5400, 7400, 3 * 60 + 55.390],
        [5300, 7500, 3 * 60 + 53.608],
        [5200, 7600, 3 * 60 + 50.946],
        [5100, 7700, 3 * 60 + 48.791],
        [5000, 7800, 3 * 60 + 47.919],
        [4900, 7900, 3 * 60 + 44.953],
        [4800, 8000, 3 * 60 + 42.100],
        [4700, 8100, 3 * 60 + 41.622],
        [4600, 8200, 3 * 60 + 40.461],
        [4500, 8300, 3 * 60 + 38.260],
        [4400, 8400, 3 * 60 + 36.772],
        [4300, 8500, 3 * 60 + 35.591],
        [4200, 8600, 3 * 60 + 32.756],
        [4100, 8700, 3 * 60 + 32.245],
        [4000, 8800, 3 * 60 + 31.544],
        [3900, 8900, 3 * 60 + 30.390],
        [3800, 9000, 3 * 60 + 29.209],
        [3700, 9100, 3 * 60 + 27.892],
        [3600, 9200, 3 * 60 + 26.185],
        [3500, 9300, 3 * 60 + 24.853],
        [3400, 9400, 3 * 60 + 23.230],
        [3300, 9500, 3 * 60 + 22.372],
        [3200, 9600, 3 * 60 + 20.633],
        [3100, 9700, 3 * 60 + 19.472],
        [3000, 9800, 3 * 60 + 18.579],
        [2900, 9900, 3 * 60 + 18.088],
        [2800, 10000, 3 * 60 + 15.857],
        [2700, 10100, 3 * 60 + 15.742],
        [2600, 10200, 3 * 60 + 13.968],
        [2500, 10300, 3 * 60 + 12.957],
        [2400, 10400, 3 * 60 + 12.875],
        [2300, 10500, 3 * 60 + 11.398],
        [2200, 10600, 3 * 60 + 9.577],
        [2100, 10700, 3 * 60 + 9.353],
        [2000, 10800, 3 * 60 + 8.021],
        [1900, 10900, 3 * 60 + 7.017],
        [1800, 11000, 3 * 60 + 6.279],
        [1700, 11100, 3 * 60 + 5.167],
        [1600, 11200, 3 * 60 + 4.184],
        [1500, 11300, 3 * 60 + 5.266],
        [1400, 11400, 3 * 60 + 2.539],
        [1300, 11500, 3 * 60 + 1.975],
        [1200, 11600, 3 * 60 + 0.713],
        [1100, 11700, 3 * 60 + 0.232],
        [1000, 11800, 2 * 60 + 59.909],
        [900, 11900, 2 * 60 + 58.244],
        [800, 12000, 2 * 60 + 58.261],
        [700, 12100, 2 * 60 + 58.198],
        [600, 12200, 2 * 60 + 58.215],
        [500, 12300, 2 * 60 + 58.173],
        [400, 12400, 2 * 60 + 58.189],
        [300, 12500, 2 * 60 + 58.285],
        [200, 12600, 2 * 60 + 58.296],
        [100, 12700, 2 * 60 + 58.358],
        [6400, 6400, 4 * 60 + 20.602],
        [6300, 6500, 4 * 60 + 16.736],
        [6200, 6600, 4 * 60 + 14.137],
        [6100, 6700, 4 * 60 + 11.659],
        [6000, 6800, 4 * 60 + 8.392],
        [5900, 6900, 4 * 60 + 7.189],
        [5800, 7000, 4 * 60 + 4.284],
        [5700, 7100, 4 * 60 + 1.634],
        [5600, 7200, 4 * 60 + 0.073],
        [5500, 7300, 3 * 60 + 57.381],
        [5400, 7400, 3 * 60 + 55.475],
        [5300, 7500, 3 * 60 + 53.366],
        [5200, 7600, 3 * 60 + 51.690],
        [5100, 7700, 3 * 60 + 49.239],
        [5000, 7800, 3 * 60 + 47.639],
        [4900, 7900, 3 * 60 + 45.554],
        [4800, 8000, 3 * 60 + 44.352],
        [4700, 8100, 3 * 60 + 40.602],
        [4600, 8200, 3 * 60 + 39.893],
        [4500, 8300, 3 * 60 + 39.064],
        [4400, 8400, 3 * 60 + 37.289],
        [4300, 8500, 3 * 60 + 35.275],
        [4200, 8600, 3 * 60 + 33.444],
        [4100, 8700, 3 * 60 + 31.894],
        [4000, 8800, 3 * 60 + 32.177],
        [3900, 8900, 3 * 60 + 30.936],
        [3800, 9000, 3 * 60 + 28.853],
        [3700, 9100, 3 * 60 + 27.250],
        [3600, 9200, 3 * 60 + 26.867],
        [3500, 9300, 3 * 60 + 25.395],
        [3400, 9400, 3 * 60 + 23.636],
        [3300, 9500, 3 * 60 + 22.663],
        [3200, 9600, 3 * 60 + 21.354],
        [3100, 9700, 3 * 60 + 20.003],
        [3000, 9800, 3 * 60 + 18.664],
        [2900, 9900, 3 * 60 + 18.058],
        [2800, 10000, 3 * 60 + 16.744],
        [2700, 10100, 3 * 60 + 14.589],
        [2600, 10200, 3 * 60 + 14.034],
        [2500, 10300, 3 * 60 + 13.723],
        [2400, 10400, 3 * 60 + 12.173],
        [2300, 10500, 3 * 60 + 11.262],
        [2200, 10600, 3 * 60 + 9.509],
        [2100, 10700, 3 * 60 + 8.282],
        [2000, 10800, 3 * 60 + 7.684],
        [1900, 10900, 3 * 60 + 7.906],
        [1800, 11000, 3 * 60 + 6.968],
        [1700, 11100, 3 * 60 + 5.315],
        [1600, 11200, 3 * 60 + 4.680],
        [1500, 11300, 3 * 60 + 2.990],
        [1400, 11400, 3 * 60 + 2.710],
        [1300, 11500, 3 * 60 + 1.038],
        [1200, 11600, 3 * 60 + 1.307],
        [1100, 11700, 3 * 60 + 0.489],
        [1000, 11800, 2 * 60 + 59.285],
        [900, 11900, 2 * 60 + 58.654],
        [800, 12000, 2 * 60 + 58.221],
        [700, 12100, 2 * 60 + 58.123],
        [600, 12200, 2 * 60 + 58.178],
        [500, 12300, 2 * 60 + 58.381],
        [400, 12400, 2 * 60 + 58.045],
        [300, 12500, 2 * 60 + 58.274],
        [200, 12600, 2 * 60 + 58.084],
        [100, 12700, 2 * 60 + 58.125],
        [6400, 6400, 4 * 60 + 19.000],
        [6300, 6500, 4 * 60 + 15.397],
        [6200, 6600, 4 * 60 + 14.616],
        [6100, 6700, 4 * 60 + 11.791],
        [6000, 6800, 4 * 60 + 9.609],
        [5900, 6900, 4 * 60 + 7.022],
        [5800, 7000, 4 * 60 + 3.246],
        [5700, 7100, 4 * 60 + 2.407],
        [5600, 7200, 3 * 60 + 59.745],
        [5500, 7300, 3 * 60 + 57.966],
        [5400, 7400, 3 * 60 + 55.262],
        [5300, 7500, 3 * 60 + 52.482],
        [5200, 7600, 3 * 60 + 51.669],
        [5100, 7700, 3 * 60 + 49.232],
        [5000, 7800, 3 * 60 + 46.289],
        [4900, 7900, 3 * 60 + 45.783],
        [4800, 8000, 3 * 60 + 43.979],
        [4700, 8100, 3 * 60 + 42.286],
        [4600, 8200, 3 * 60 + 40.084],
        [4500, 8300, 3 * 60 + 38.176],
        [4400, 8400, 3 * 60 + 36.486],
        [4300, 8500, 3 * 60 + 34.976],
        [4200, 8600, 3 * 60 + 32.497],
        [4100, 8700, 3 * 60 + 31.089],
        [4000, 8800, 3 * 60 + 31.972],
        [3900, 8900, 3 * 60 + 30.578],
        [3800, 9000, 3 * 60 + 29.486],
        [3700, 9100, 3 * 60 + 27.625],
        [3600, 9200, 3 * 60 + 25.950],
        [3500, 9300, 3 * 60 + 25.240],
        [3400, 9400, 3 * 60 + 23.736],
        [3300, 9500, 3 * 60 + 22.294],
        [3200, 9600, 3 * 60 + 21.685],
        [3100, 9700, 3 * 60 + 19.949],
        [3000, 9800, 3 * 60 + 18.878],
        [2900, 9900, 3 * 60 + 17.787],
        [2800, 10000, 3 * 60 + 15.893],
        [2700, 10100, 3 * 60 + 15.447],
        [2600, 10200, 3 * 60 + 14.798],
        [2500, 10300, 3 * 60 + 13.446],
        [2400, 10400, 3 * 60 + 12.132],
        [2300, 10500, 3 * 60 + 11.467],
        [2200, 10600, 3 * 60 + 10.060],
        [2100, 10700, 3 * 60 + 8.153],
        [2000, 10800, 3 * 60 + 8.236],
        [1900, 10900, 3 * 60 + 7.446],
        [1800, 11000, 3 * 60 + 6.192],
        [1700, 11100, 3 * 60 + 5.114],
        [1600, 11200, 3 * 60 + 3.271],
        [1500, 11300, 3 * 60 + 1.956],
        [1400, 11400, 3 * 60 + 2.141],
        [1300, 11500, 3 * 60 + 1.517],
        [1200, 11600, 3 * 60 + 1.829],
        [1100, 11700, 2 * 60 + 58.271],
        [1000, 11800, 2 * 60 + 59.251],
        [900, 11900, 2 * 60 + 58.824],
        [800, 12000, 2 * 60 + 58.321],
        [700, 12100, 2 * 60 + 58.174],
        [600, 12200, 2 * 60 + 58.431],
        [500, 12300, 2 * 60 + 58.604],
        [400, 12400, 2 * 60 + 58.176],
        [300, 12500, 2 * 60 + 58.294],
        [200, 12600, 2 * 60 + 58.067],
        [100, 12700, 2 * 60 + 58.124],
        [6400, 6400, 4 * 60 + 19.853],
        [6300, 6500, 4 * 60 + 16.099],
        [6200, 6600, 4 * 60 + 13.990],
        [6100, 6700, 4 * 60 + 11.786],
        [6000, 6800, 4 * 60 + 9.337],
        [5900, 6900, 4 * 60 + 6.172],
        [5800, 7000, 4 * 60 + 3.940],
        [5700, 7100, 4 * 60 + 1.423],
        [5600, 7200, 3 * 60 + 59.082],
        [5500, 7300, 3 * 60 + 57.577],
        [5400, 7400, 3 * 60 + 54.693],
        [5300, 7500, 3 * 60 + 53.009],
        [5200, 7600, 3 * 60 + 50.682],
        [5100, 7700, 3 * 60 + 48.905],
        [5000, 7800, 3 * 60 + 47.411],
        [4900, 7900, 3 * 60 + 44.750],
        [4800, 8000, 3 * 60 + 42.945],
        [4700, 8100, 3 * 60 + 41.285],
        [4600, 8200, 3 * 60 + 39.907],
        [4500, 8300, 3 * 60 + 38.360],
        [4400, 8400, 3 * 60 + 38.397],
        [4300, 8500, 3 * 60 + 34.748],
        [4200, 8600, 3 * 60 + 34.461],
        [4100, 8700, 3 * 60 + 31.594],
        [4000, 8800, 3 * 60 + 31.253],
        [3900, 8900, 3 * 60 + 30.641],
        [3800, 9000, 3 * 60 + 29.438],
        [3700, 9100, 3 * 60 + 27.461],
        [3600, 9200, 3 * 60 + 27.121],
        [3500, 9300, 3 * 60 + 24.545],
        [3400, 9400, 3 * 60 + 23.163],
        [3300, 9500, 3 * 60 + 22.837],
        [3200, 9600, 3 * 60 + 20.851],
        [3100, 9700, 3 * 60 + 19.576],
        [3000, 9800, 3 * 60 + 18.668],
        [2900, 9900, 3 * 60 + 17.638],
        [2800, 10000, 3 * 60 + 17.078],
        [2700, 10100, 3 * 60 + 16.335],
        [2600, 10200, 3 * 60 + 14.051],
        [2500, 10300, 3 * 60 + 12.799],
        [2400, 10400, 3 * 60 + 11.984],
        [2300, 10500, 3 * 60 + 10.928],
        [2200, 10600, 3 * 60 + 9.778],
        [2100, 10700, 3 * 60 + 8.698],
        [2000, 10800, 3 * 60 + 7.389],
        [1900, 10900, 3 * 60 + 7.073],
        [1800, 11000, 3 * 60 + 6.344],
        [1700, 11100, 3 * 60 + 5.105],
        [1600, 11200, 3 * 60 + 3.235],
        [1500, 11300, 3 * 60 + 3.744],
        [1400, 11400, 3 * 60 + 2.109],
        [1300, 11500, 3 * 60 + 1.189],
        [1200, 11600, 3 * 60 + 0.473],
        [1100, 11700, 2 * 60 + 59.329],
        [1000, 11800, 2 * 60 + 58.895],
        [900, 11900, 2 * 60 + 58.540],
        [800, 12000, 2 * 60 + 58.229],
        [700, 12100, 2 * 60 + 58.230],
        [600, 12200, 2 * 60 + 58.217],
        [500, 12300, 2 * 60 + 58.357],
        [400, 12400, 2 * 60 + 58.232],
        [300, 12500, 2 * 60 + 58.221],
        [200, 12600, 2 * 60 + 58.386],
        [100, 12700, 2 * 60 + 58.311],
        [6400, 6400, 4 * 60 + 19.580],
        [6300, 6500, 4 * 60 + 16.412],
        [6200, 6600, 4 * 60 + 13.912],
        [6100, 6700, 4 * 60 + 12.234],
        [6000, 6800, 4 * 60 + 9.229],
        [5900, 6900, 4 * 60 + 6.837],
        [5800, 7000, 4 * 60 + 4.962],
        [5700, 7100, 4 * 60 + 3.127],
        [5600, 7200, 3 * 60 + 59.396],
        [5500, 7300, 3 * 60 + 57.013],
        [5400, 7400, 3 * 60 + 54.433],
        [5300, 7500, 3 * 60 + 52.906],
        [5200, 7600, 3 * 60 + 50.872],
        [5100, 7700, 3 * 60 + 48.987],
        [5000, 7800, 3 * 60 + 46.168],
        [4900, 7900, 3 * 60 + 45.198],
        [4800, 8000, 3 * 60 + 43.584],
        [4700, 8100, 3 * 60 + 41.863],
        [4600, 8200, 3 * 60 + 40.064],
        [4500, 8300, 3 * 60 + 38.845],
        [4400, 8400, 3 * 60 + 36.169],
        [4300, 8500, 3 * 60 + 35.127],
        [4200, 8600, 3 * 60 + 32.985],
        [4100, 8700, 3 * 60 + 31.709],
        [4000, 8800, 3 * 60 + 32.281],
        [3900, 8900, 3 * 60 + 30.554],
        [3800, 9000, 3 * 60 + 28.685],
        [3700, 9100, 3 * 60 + 27.982],
        [3600, 9200, 3 * 60 + 26.758],
        [3500, 9300, 3 * 60 + 25.184],
        [3400, 9400, 3 * 60 + 23.205],
        [3300, 9500, 3 * 60 + 22.172],
        [3200, 9600, 3 * 60 + 20.840],
        [3100, 9700, 3 * 60 + 20.766],
        [3000, 9800, 3 * 60 + 19.109],
        [2900, 9900, 3 * 60 + 17.524],
        [2800, 10000, 3 * 60 + 16.653],
        [2700, 10100, 3 * 60 + 15.118],
        [2600, 10200, 3 * 60 + 14.203],
        [2500, 10300, 3 * 60 + 13.406],
        [2400, 10400, 3 * 60 + 11.332],
        [2300, 10500, 3 * 60 + 10.866],
        [2200, 10600, 3 * 60 + 10.321],
        [2100, 10700, 3 * 60 + 9.437],
        [2000, 10800, 3 * 60 + 8.079],
        [1900, 10900, 3 * 60 + 7.538],
        [1800, 11000, 3 * 60 + 5.993],
        [1700, 11100, 3 * 60 + 5.037],
        [1600, 11200, 3 * 60 + 4.440],
        [1500, 11300, 3 * 60 + 3.353],
        [1400, 11400, 3 * 60 + 2.712],
        [1300, 11500, 3 * 60 + 1.608],
        [1200, 11600, 3 * 60 + 0.388],
        [1100, 11700, 2 * 60 + 59.206],
        [1000, 11800, 2 * 60 + 58.259],
        [900, 11900, 2 * 60 + 58.493],
        [800, 12000, 2 * 60 + 58.260],
        [700, 12100, 2 * 60 + 58.307],
        [600, 12200, 2 * 60 + 58.370],
        [500, 12300, 2 * 60 + 58.269],
        [400, 12400, 2 * 60 + 58.178],
        [300, 12500, 2 * 60 + 58.326],
        [200, 12600, 2 * 60 + 58.415],
        [100, 12700, 2 * 60 + 58.303],
        [6400, 6400, 4 * 60 + 19.295],
        [6300, 6500, 4 * 60 + 16.506],
        [6200, 6600, 4 * 60 + 14.038],
        [6100, 6700, 4 * 60 + 10.888],
        [6000, 6800, 4 * 60 + 9.427],
        [5900, 6900, 4 * 60 + 6.878],
        [5800, 7000, 4 * 60 + 4.226],
        [5700, 7100, 4 * 60 + 1.719],
        [5600, 7200, 4 * 60 + 0.185],
        [5500, 7300, 3 * 60 + 57.971],
        [5400, 7400, 3 * 60 + 55.601],
        [5300, 7500, 3 * 60 + 53.918],
        [5200, 7600, 3 * 60 + 51.443],
        [5100, 7700, 3 * 60 + 49.276],
        [5000, 7800, 3 * 60 + 47.084],
        [4900, 7900, 3 * 60 + 45.373],
        [4800, 8000, 3 * 60 + 43.803],
        [4700, 8100, 3 * 60 + 41.713],
        [4600, 8200, 3 * 60 + 40.628],
        [4500, 8300, 3 * 60 + 38.314],
        [4400, 8400, 3 * 60 + 36.876],
        [4300, 8500, 3 * 60 + 35.415],
        [4200, 8600, 3 * 60 + 33.650],
        [4100, 8700, 3 * 60 + 32.577],
        [4000, 8800, 3 * 60 + 31.393],
        [3900, 8900, 3 * 60 + 30.635],
        [3800, 9000, 3 * 60 + 28.986],
        [3700, 9100, 3 * 60 + 27.567],
        [3600, 9200, 3 * 60 + 26.097],
        [3500, 9300, 3 * 60 + 25.866],
        [3400, 9400, 3 * 60 + 24.479],
        [3300, 9500, 3 * 60 + 22.558],
        [3200, 9600, 3 * 60 + 20.857],
        [3100, 9700, 3 * 60 + 19.221],
        [3000, 9800, 3 * 60 + 19.253],
        [2900, 9900, 3 * 60 + 17.056],
        [2800, 10000, 3 * 60 + 16.192],
        [2700, 10100, 3 * 60 + 15.718],
        [2600, 10200, 3 * 60 + 14.079],
        [2500, 10300, 3 * 60 + 13.239],
        [2400, 10400, 3 * 60 + 12.347],
        [2300, 10500, 3 * 60 + 10.426],
        [2200, 10600, 3 * 60 + 9.607],
        [2100, 10700, 3 * 60 + 9.162],
        [2000, 10800, 3 * 60 + 7.841],
        [1900, 10900, 3 * 60 + 7.080],
        [1800, 11000, 3 * 60 + 5.217],
        [1700, 11100, 3 * 60 + 4.844],
        [1600, 11200, 3 * 60 + 3.687],
        [1500, 11300, 3 * 60 + 2.631],
        [1400, 11400, 3 * 60 + 2.833],
        [1300, 11500, 3 * 60 + 1.245],
        [1200, 11600, 3 * 60 + 0.200],
        [1100, 11700, 3 * 60 + 0.025],
        [1000, 11800, 2 * 60 + 58.824],
        [900, 11900, 2 * 60 + 58.269],
        [800, 12000, 2 * 60 + 58.307],
        [700, 12100, 2 * 60 + 58.319],
        [600, 12200, 2 * 60 + 58.159],
        [500, 12300, 2 * 60 + 58.306],
        [400, 12400, 2 * 60 + 58.349],
        [300, 12500, 2 * 60 + 58.407],
        [200, 12600, 2 * 60 + 58.139],
        [100, 12700, 2 * 60 + 58.312],
        [6400, 6400, 4 * 60 + 22.399],
        [6300, 6500, 4 * 60 + 17.502],
        [6200, 6600, 4 * 60 + 14.110],
        [6100, 6700, 4 * 60 + 10.983],
        [6000, 6800, 4 * 60 + 10.219],
        [5900, 6900, 4 * 60 + 6.073],
        [5800, 7000, 4 * 60 + 4.371],
        [5700, 7100, 4 * 60 + 1.763],
        [5600, 7200, 3 * 60 + 59.206],
        [5500, 7300, 3 * 60 + 56.803],
        [5400, 7400, 3 * 60 + 55.754],
        [5300, 7500, 3 * 60 + 53.172],
        [5200, 7600, 3 * 60 + 51.684],
        [5100, 7700, 3 * 60 + 49.344],
        [5000, 7800, 3 * 60 + 46.097],
        [4900, 7900, 3 * 60 + 44.950],
        [4800, 8000, 3 * 60 + 43.632],
        [4700, 8100, 3 * 60 + 42.593],
        [4600, 8200, 3 * 60 + 41.072],
        [4500, 8300, 3 * 60 + 37.071],
        [4400, 8400, 3 * 60 + 36.501],
        [4300, 8500, 3 * 60 + 35.259],
        [4200, 8600, 3 * 60 + 33.204],
        [4100, 8700, 3 * 60 + 34.030],
        [4000, 8800, 3 * 60 + 31.971],
        [3900, 8900, 3 * 60 + 30.163],
        [3800, 9000, 3 * 60 + 29.121],
        [3700, 9100, 3 * 60 + 27.732],
        [3600, 9200, 3 * 60 + 26.705],
        [3500, 9300, 3 * 60 + 24.892],
        [3400, 9400, 3 * 60 + 23.742],
        [3300, 9500, 3 * 60 + 22.992],
        [3200, 9600, 3 * 60 + 21.201],
        [3100, 9700, 3 * 60 + 20.215],
        [3000, 9800, 3 * 60 + 19.636],
        [2900, 9900, 3 * 60 + 17.525],
        [2800, 10000, 3 * 60 + 17.671],
        [2700, 10100, 3 * 60 + 15.177],
        [2600, 10200, 3 * 60 + 13.528],
        [2500, 10300, 3 * 60 + 12.622],
        [2400, 10400, 3 * 60 + 12.006],
        [2300, 10500, 3 * 60 + 10.978],
        [2200, 10600, 3 * 60 + 8.793],
        [2100, 10700, 3 * 60 + 9.067],
        [2000, 10800, 3 * 60 + 9.006],
        [1900, 10900, 3 * 60 + 7.179],
        [1800, 11000, 3 * 60 + 7.018],
        [1700, 11100, 3 * 60 + 5.326],
        [1600, 11200, 3 * 60 + 4.264],
        [1500, 11300, 3 * 60 + 3.257],
        [1400, 11400, 3 * 60 + 2.800],
        [1300, 11500, 3 * 60 + 1.591],
        [1200, 11600, 3 * 60 + 1.069],
        [1100, 11700, 2 * 60 + 59.267],
        [1000, 11800, 2 * 60 + 59.118],
        [900, 11900, 2 * 60 + 58.230],
        [800, 12000, 2 * 60 + 58.067],
        [700, 12100, 2 * 60 + 58.129],
        [600, 12200, 2 * 60 + 58.401],
        [500, 12300, 2 * 60 + 58.215],
        [400, 12400, 2 * 60 + 58.333],
        [300, 12500, 2 * 60 + 58.409],
        [200, 12600, 2 * 60 + 58.236],
        [100, 12700, 2 * 60 + 58.416],
        [6400, 6400, 4 * 60 + 18.609],
        [6300, 6500, 4 * 60 + 16.245],
        [6200, 6600, 4 * 60 + 14.133],
        [6100, 6700, 4 * 60 + 12.122],
        [6000, 6800, 4 * 60 + 8.735],
        [5900, 6900, 4 * 60 + 7.364],
        [5800, 7000, 4 * 60 + 4.246],
        [5700, 7100, 4 * 60 + 2.500],
        [5600, 7200, 3 * 60 + 59.749],
        [5500, 7300, 3 * 60 + 57.155],
        [5400, 7400, 3 * 60 + 55.656],
        [5300, 7500, 3 * 60 + 52.810],
        [5200, 7600, 3 * 60 + 51.531],
        [5100, 7700, 3 * 60 + 49.248],
        [5000, 7800, 3 * 60 + 47.886],
        [4900, 7900, 3 * 60 + 45.718],
        [4800, 8000, 3 * 60 + 43.630],
        [4700, 8100, 3 * 60 + 41.327],
        [4600, 8200, 3 * 60 + 40.159],
        [4500, 8300, 3 * 60 + 38.429],
        [4400, 8400, 3 * 60 + 36.569],
        [4300, 8500, 3 * 60 + 35.280],
        [4200, 8600, 3 * 60 + 32.183],
        [4100, 8700, 3 * 60 + 32.836],
        [4000, 8800, 3 * 60 + 32.163],
        [3900, 8900, 3 * 60 + 30.444],
        [3800, 9000, 3 * 60 + 29.849],
        [3700, 9100, 3 * 60 + 28.424],
        [3600, 9200, 3 * 60 + 26.479],
        [3500, 9300, 3 * 60 + 24.371],
        [3400, 9400, 3 * 60 + 23.729],
        [3300, 9500, 3 * 60 + 21.469],
        [3200, 9600, 3 * 60 + 21.334],
        [3100, 9700, 3 * 60 + 20.012],
        [3000, 9800, 3 * 60 + 19.024],
        [2900, 9900, 3 * 60 + 17.267],
        [2800, 10000, 3 * 60 + 16.398],
        [2700, 10100, 3 * 60 + 15.552],
        [2600, 10200, 3 * 60 + 14.288],
        [2500, 10300, 3 * 60 + 13.401],
        [2400, 10400, 3 * 60 + 12.676],
        [2300, 10500, 3 * 60 + 11.325],
        [2200, 10600, 3 * 60 + 9.867],
        [2100, 10700, 3 * 60 + 8.861],
        [2000, 10800, 3 * 60 + 8.383],
        [1900, 10900, 3 * 60 + 7.110],
        [1800, 11000, 3 * 60 + 5.359],
        [1700, 11100, 3 * 60 + 4.191],
        [1600, 11200, 3 * 60 + 4.511],
        [1500, 11300, 3 * 60 + 3.057],
        [1400, 11400, 3 * 60 + 1.854],
        [1300, 11500, 3 * 60 + 1.884],
        [1200, 11600, 3 * 60 + 0.841],
        [1100, 11700, 2 * 60 + 59.624],
        [1000, 11800, 2 * 60 + 59.123],
        [900, 11900, 2 * 60 + 58.123],
        [800, 12000, 2 * 60 + 58.200],
        [700, 12100, 2 * 60 + 58.284],
        [600, 12200, 2 * 60 + 58.533],
        [500, 12300, 2 * 60 + 58.265],
        [400, 12400, 2 * 60 + 58.168],
        [300, 12500, 2 * 60 + 58.510],
        [200, 12600, 2 * 60 + 58.359],
        [100, 12700, 2 * 60 + 58.283],

        # shorter test eval run (still valid data we can work with; only cut short for time purposes)
        [6400, 6400, 4 * 60 + 21.853],
        [6300, 6500, 4 * 60 + 18.064],
        [6200, 6600, 4 * 60 + 13.488],
        [6100, 6700, 4 * 60 + 15.194],
        [6000, 6800, 4 * 60 + 11.532],
        [5900, 6900, 4 * 60 + 6.660],
        [5800, 7000, 4 * 60 + 6.715],
        [5700, 7100, 4 * 60 + 1.974],
        [5600, 7200, 3 * 60 + 59.300],
        [5500, 7300, 3 * 60 + 58.068],
        [5400, 7400, 3 * 60 + 55.167],
        [5300, 7500, 3 * 60 + 52.989],
        [5200, 7600, 3 * 60 + 51.025],
        [5100, 7700, 3 * 60 + 48.806],
        [5000, 7800, 3 * 60 + 47.104],
        [4900, 7900, 3 * 60 + 45.309],
        [4800, 8000, 3 * 60 + 43.296],
        [4700, 8100, 3 * 60 + 41.890],
        [4600, 8200, 3 * 60 + 39.478],
        [4500, 8300, 3 * 60 + 38.578],
        [4400, 8400, 3 * 60 + 37.095],
        [4300, 8500, 3 * 60 + 35.932],
        [4200, 8600, 3 * 60 + 34.175],
        [4100, 8700, 3 * 60 + 32.054],
        [4000, 8800, 3 * 60 + 32.177],
        [3900, 8900, 3 * 60 + 30.814],
        [3800, 9000, 3 * 60 + 28.522],
        [3700, 9100, 3 * 60 + 28.296],
        [3600, 9200, 3 * 60 + 25.962],
        [3500, 9300, 3 * 60 + 24.981],
        [3400, 9400, 3 * 60 + 24.120],
        [3300, 9500, 3 * 60 + 22.143],
        [3200, 9600, 3 * 60 + 21.199],
        [3100, 9700, 3 * 60 + 19.618],
        [3000, 9800, 3 * 60 + 19.557],
        [2900, 9900, 3 * 60 + 18.065],
        [2800, 10000, 3 * 60 + 16.961],
        [2700, 10100, 3 * 60 + 15.869],
        [2600, 10200, 3 * 60 + 13.890],
        [2500, 10300, 3 * 60 + 12.963],
        [2400, 10400, 3 * 60 + 11.639],
        [2300, 10500, 3 * 60 + 11.313],
        [2200, 10600, 3 * 60 + 10.007],
        [2100, 10700, 3 * 60 + 8.752],
        [2000, 10800, 3 * 60 + 8.008],
        [1900, 10900, 3 * 60 + 6.503],
        [1800, 11000, 3 * 60 + 6.347],
        [1700, 11100, 3 * 60 + 6.837],
        [1600, 11200, 3 * 60 + 4.680],
        [1500, 11300, 3 * 60 + 3.631],
        [1400, 11400, 3 * 60 + 2.847],
        [1300, 11500, 3 * 60 + 1.255],
        [1200, 11600, 3 * 60 + 0.002],
        [1100, 11700, 2 * 60 + 59.951],
        [1000, 11800, 2 * 60 + 59.659],
        [900, 11900, 2 * 60 + 58.241],
        [800, 12000, 2 * 60 + 58.255],
        [700, 12100, 2 * 60 + 58.252],
        [600, 12200, 2 * 60 + 58.407],
        [500, 12300, 2 * 60 + 58.207],
        [400, 12400, 2 * 60 + 58.204],
        [300, 12500, 2 * 60 + 58.220],
        [200, 12600, 2 * 60 + 58.136],
        [100, 12700, 2 * 60 + 58.262]]

    aggregated_data = dict()

    for d in data:
        key = d[1] / 12800

        if key in aggregated_data.keys():
            aggregated_data[key]['data'].append(d[2])
        else:
            aggregated_data[key] = { 'data': [d[2]] }

    xs = list()
    ys = list()
    es = list()

    for k, v in aggregated_data.items():
        xs.append(100 * k)
        ys.append(np.average(v['data']))
        es.append([np.average(v['data']) - min(v['data']), max(v['data']) - np.average(v['data'])])

    es = np.transpose(es)
    plotObj.errorbar(xs, ys, es, fmt=' ', c='black', zorder=1, capsize=3)
    plotObj.scatter(xs, ys, c='black', s=2, zorder=1)

ax1 = None
ax2 = None
drawEnd = None

def LinkPrio(linkPrio1, linkPrio2, enablePlot):
    dl1InSize = 1137486559
    dl1OutSize = dl1InSize
    dl1Data = Func([0, dl1InSize], [[1, 0]])
    dl1Rate = PPoly([0, dl1OutSize], [[1]])
    dl1 = Task([dl1Rate], [dl1Data])

    # dl2 is exactly like dl1, just execution differs
    dl2OutSize = dl2InSize = dl1InSize
    dl2Rate = dl1Rate
    dl2 = dl1

    t1InSize = dl1OutSize
    t1OutSize = 80 * 1024 * 1024
    t1OutTime = 82
    t1Cpu = PPoly([0, t1OutSize], [[t1OutTime / t1OutSize]])
    t1Data = Func([0, t1InSize - 0.0001, t1InSize], [[0], [t1OutSize]])
    t1 = Task([t1Cpu], [t1Data])

    t2InSize = t1InSize
    t2OutSize = t1OutSize
    t2OutTime = t1OutTime
    t2Cpu = PPoly([0, t2OutSize], [[t2OutTime / t2OutSize]])
    t2Data = Func([0, t2InSize - 0.0001, t2InSize], [[t2OutSize / t2InSize, 0], [0, t2OutSize]])
    t2 = Task([t2Cpu], [t2Data])

    t3OutTime = 1
    t3In1Size = t1OutSize
    t3In2Size = t2OutSize
    t3OutSize = t3In1Size + t3In2Size
    t3Cpu = PPoly([0, t3OutSize], [[t3OutTime / t3OutSize]])
    t3Data1 = Func([0, t3In1Size], [[t3OutSize / t3In1Size, 0]])
    t3Data2 = Func([0, t3In2Size], [[t3OutSize / t3In2Size, 0]])
    t3 = Task([t3Cpu], [t3Data1, t3Data2])

    linkRate = 12481*1024
    linkRate1 = linkRate * linkPrio1 / (linkPrio1 + linkPrio2)
    linkRate2 = linkRate * linkPrio2 / (linkPrio1 + linkPrio2)

    dl1DataRate = PPoly([0, 500], [[linkRate1]])
    dl1Exec = TaskExecution(dl1, [dl1DataRate], [Func([0, 500], [[dl1InSize]])])
    dl1DataOut, dl1Bn = dl1Exec.get_result()

    t1TransferTime = dl1DataOut.x[1]
    dl1DataRate = PPoly([0, t1TransferTime, 500], [[linkRate1, 0]])

    t1DataIn = dl1DataOut
    t1Exec = TaskExecution(t1, [PPoly([0, 500], [[1]])], [t1DataIn])
    t1DataOut, t1Bn = t1Exec.get_result()

    dl2DataRate = PPoly([0, 500], [[linkRate]]) - dl1DataRate
    dl2Exec = TaskExecution(dl2, [dl2DataRate], [Func([0, 500], [[dl2InSize]])])
    dl2DataOut, dl2Bn = dl2Exec.get_result()

    t2DataIn = dl2DataOut
    t2Exec = TaskExecution(t2, [PPoly([0, 500], [[1]])], [t2DataIn])
    t2DataOut, t2Bn = t2Exec.get_result()

    t3DataIn1 = t1DataOut
    t3DataIn2 = t2DataOut
    t3Exec = TaskExecution(t3, [PPoly([0, 500], [[1]])], [t3DataIn1, t3DataIn2])
    t3DataOut, t3Bn = t3Exec.get_result()

    if not enablePlot:
        return t3DataOut.x[-1]

    # else resource consumptions calculations will be wrong
    dl1DataOut.extend([[dl1DataOut(dl1DataOut.x[-1])]], [math.inf])
    dl2DataOut.extend([[dl2DataOut(dl2DataOut.x[-1])]], [math.inf])

    # stuff for single eval prints
    result, resultbn = t3DataOut, t3Bn
    resultbn = list(range(len(resultbn)))
    resultbn[0], resultbn[1] = resultbn[1], resultbn[0]

    result /= 1024 * 1024
    result *= 1200/160
    result += 0.5
    result /= 12 # for percent instead of MiB
    PlotPPoly(ax1, result, resultbn)
    global drawEnd
    if drawEnd is None:
        drawEnd = result.x[-1]
    else:
        result.extend([[result(result.x[-1])]], [drawEnd])
        ax1.plot([result.x[-2], drawEnd], [result(result.x[-2]), result(result.x[-2])], 'black')
    ax1.axis((result.x[0], result.x[-1], 0, result(result.x[-1])*1.02))

    mpl.rc('lines', linestyle='solid')
    xs = np.linspace(result.x[0], result.x[-1], 1000)
    for (i, (res, inc, outc)) in enumerate(zip([dl1DataOut, dl2DataOut], [dl1DataRate, dl2DataRate], [dl1Rate, dl2Rate])):
        dres = res.derivative()
        color = 'C' + str(i + 1)
        mpl.rc('lines', linestyle='--')
        ax2.plot(xs, inc(xs) / (1024*1024) + i*0.15, color)
        mpl.rc('lines', linestyle='solid')
        ax2.plot(xs, dres(xs) * outc(res)(xs) / (1024*1024) + i*0.15, color, label='step ' + str(i + 1) + ' DL')

    _, _, _, ymax = ax2.axis()
    ax2.axis((result.x[0], result.x[-1], 0, ymax))
    ax2.set_xlabel('time [seconds]')

fig, ((ax1, ax3), (ax2, ax4)) = plt.subplots(2, 2)
LinkPrio(50, 50, True)
ax1.set_ylabel('progress [%]')
ax1.tick_params(
    axis='both',
    which='both',
    bottom=True,
    top=False,
    left=False,
    right=True,
    labelbottom=False,
    labelleft=False,
    labelright=False
)
ax2.legend()
ax2.set_ylabel('data rate [MiB/second]')
ax2.tick_params(
    axis='both',
    which='both',
    bottom=True,
    top=False,
    left=False,
    right=True,
    labelbottom=True,
    labelleft=False,
    labelright=False
)

ax1, ax2, ax3, ax4 = ax3, ax4, ax1, ax2
LinkPrio(95, 5, True)
handles, labels = ax1.get_legend_handles_labels()
_, handles = zip(*sorted(zip(labels, handles), key=lambda t: t[0])) # sort both labels and handles by labels
handles = list(handles)
handles[0], handles[1] = handles[1], handles[0]
#ax1.legend(handles, ['step 1 DL', 'step 1 CPU', 'step 2 DL'], title='Limited by:', loc='upper left')
ax1.tick_params(
    axis='both',
    which='both',
    bottom=True,
    top=False,
    left=False,
    right=True,
    labelbottom=False,
    labelleft=False,
    labelright=True
)
ax2.tick_params(
    axis='both',
    which='both',
    bottom=True,
    top=False,
    left=False,
    right=True,
    labelbottom=True,
    labelleft=False,
    labelright=True
)

w, h = fig.get_size_inches()
fig.set_size_inches(w * 1.05, h * 0.85)
fig.tight_layout()
plt.savefig('figures/eval_bottlenecks.pdf', bbox_inches='tight', pad_inches=0)
plt.savefig('figures/eval_bottlenecks.png', bbox_inches='tight', pad_inches=0, dpi=2400)
#plt.show()

x = []
y = []
for i in range(6400, 12700, 10):
    try:
        res = LinkPrio(i, 12800 - i, False)
        x.append(100 * i / 12800)
        y.append(res)
    except:
        pass

plt.figure()
plt.plot(x, y, c='C1', zorder=2)
PlotRealExecutionTimes(plt)
plt.axis((49, 100, 170, 270))
plt.xlabel('portion of link data rate given to step 1 [%]')
plt.ylabel("total task execution time\n[seconds]")
plt.gca().set_aspect(1 / 5)
plt.savefig('figures/evalcompare.pdf', bbox_inches='tight', pad_inches=0)
plt.show()

# old setting with worse colors and order
#fig, ax = plt.subplots()
#plt.plot(x, y, c='C0', zorder=0)
#PlotRealExecutionTimes()
#plt.axis((49, 100, 170, 270))
#plt.xlabel('portion of link data rate given to task 1 [%]')
#plt.ylabel('total workflow execution time [seconds]')
#plt.savefig('figures/evalcompare.pdf', bbox_inches='tight', pad_inches=0)
#plt.savefig('figures/evalcompare.png', bbox_inches='tight', pad_inches=0, dpi=2400)
#plt.show()

# not needed for paper
#plt.figure()
#PlotRealBottleModPerformanceTimes()
#plt.axis((0, 1001, 0, 30))
#plt.xlabel('simulated input data size [GB]')
#plt.ylabel('total simulation time [seconds]')
#plt.savefig('figures/performance.pdf', bbox_inches='tight', pad_inches=0)
#plt.show()
